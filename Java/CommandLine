*******************************************************
Compile a file by adding dependent jars.. package com.test.
so copy file inside com/test and compile from inside test....

javac  -cp .:/jars/* com/template/*.java
javac -cp .:/home/pms/logtail/lib/* GbFileWriter.java

********************************************************

java -cp *:. com/infy/test/graphite/TestGraphite
java -cp *:./classes logrotate.LogWriter &    ====  java -cp *:./classes:lib/log4j-1.2.17.jar logrotate.LogWriter

java -cp *:. com/pms/UploadToGraph


From the docs --> http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javac.html See the option section.
-d directory
Set the destination directory for class files. The directory must already exist; javac will not create it. If a class is part of a package, javac puts the class file in a subdirectory reflecting the package name, creating directories as needed. For example, if you specify -d C:\myclasses and the class is called com.mypackage.MyClass, then the class file is called C:\myclasses\com\mypackage\MyClass.class. If -d is not specified, javac puts each class files in the same directory as the source file from which it was generated.
Note: The directory specified by -d is not automatically added to your user class path.


When you invoke a program using java on the command-line, you should supply the fully-qualified class name of the class that contains your main method and omit the .class, like so:
java com.Hello
The java program needs this fully-qualified class name to understand which class you are referring to.

From <http://stackoverflow.com/questions/12096016/java-cant-find-main-class> 
